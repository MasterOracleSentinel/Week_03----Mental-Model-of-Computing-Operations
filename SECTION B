(1)
What We Should Be Thinking About When We Code

Create your own real-world mental model of a computer using analogies for the CPU, stack, heap, machine instructions, and input and output. 

For example: 

Input: A waitress brings a food order to the kitchen. 

CPU: The chef. He sees the order is for a large lasagna. 

Machine instructions:  Small individual steps the chef needs to take to make the lasagna.

Such as:

Boil water
Make ricotta cheese stuffing
Cook noodles
Assemble lasagna in layers
Bake at 400 degrees for 15 minutes
Stack: The cooking process to create the dish, which has several interrelated steps to be executed one at a time.  
For example, Step 2: Making ricotta cheese stuffing may have a subsection of melting butter, which he must do before 
proceeding with the much larger task of finishing the cheese stuffing. The process stops at some points and starts 
again at others depending on what he must do next to cook the food. 

Heap:  It is where individual ingredients are stored, like a pantry or a refrigerator.  The ingredients for lasagna 
are noodles and sauce stored in the pantry, and cheese stored in the fridge. The ingredients for a JavaScript program
are objects, arrays, strings, numbers, etc., and they are stored in the computer’s memory. 

Output: The finished lasagna, which the waitress brings to the customer. 

Be creative, have fun, and don’t worry about getting it absolutely right or perfect. You will refine this mental model as you go along! 

Submission Instructions:

Word count: 200-500
You are encouraged to reply to your fellow learners to continue the conversation, particularly about the output. Do you think the 
output described will successfully occur?


(2)

Global, Local, And Block Scope

Instructions:

In your tech career, you will often hear the term “use case”. A use case is a concrete example of how a piece of technology can be used. For example, in the real-world, one use case for a microwave is to warm up leftover lasagna for lunch. In the coding world, one use case for an array could be to store a list of names of enrolled students in a program that tracks student engagement.

For this exercise, you are going to imagine a use case for each of the three types of scoped variables Professor Williams discussed: Global, local, and block scope. 

Variables can be declared in the following scopes:

Global scope to be accessible and changeable anywhere in the program
Local scope to be accessible and changeable anywhere inside of the function they were declared in
Block scope to be accessible and changeable anywhere inside the block they were declared in
Let’s imagine writing a program that tracks students’ grades for a class. Address the following questions in your post to this discussion.

What would be the use case for a globally scoped variable in this program?
What are some data you would want to have available to you anywhere in the program? (An example could be a roster of 
currently enrolled students, stored in an object.)
What would be the use case for a locally scoped variable in this program?
What are some data you would want to have available only in certain parts of your program?  (An example could be a chart 
of individual student's grades for their assignments during the course.)
What would be the use case for a block-scoped variable in this program?
What are some data you would want to have available in only extremely small parts of your program? (An example could be an 
individual student’s grade in one small assessment during the course.) 
Submission Instructions:

Word count: 50-100
You are encouraged to reply to your fellow learners to continue the conversation. Are there ideas and suggestions that your 
peers have that you had not considered? Tell them about it!

(3)
CHALLANGE




